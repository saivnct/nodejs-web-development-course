const ContractDAO = require('../db/ContractDAO');


exports.getContract = async (req, res, next) => {
  try{
    const contractAddr = req.params.contractAddr;

    const contract = await ContractDAO.GetByContractAddr(contractAddr);

    if (!contract){
      return res.status(200).json({
        //200 - OK
        status: 'success',
        data: {},
      });
    }

    if (contract.metadata){
      const buff = Buffer.from(contract.metadata, 'base64');


      const metadata = JSON.parse(buff.toString());
      console.log("metadata", metadata)
      console.log("abi", metadata.output.abi);
    }

    res.status(200).json({
      //200 - OK
      status: 'success',
      data: {
        contract: {
          ...contract,
          data: contract.data.toString('hex'),
        },
      },
    });
  }catch (e) {
    console.error(e);

    res.status(500).json({
      //200 - OK
      status: 'failed',
    });
  }

};

exports.verifiedContract = async (req, res, next) => {
  try{
    const contractAddr = req.params.contractAddr;


    const data = Buffer.fromhex");
    const metaData = {
        "name": "Test",
        "description": "Test",
    }


    const result = await ContractDAO.VerifiedContract(contractAddr, true, data, JSON.stringify(metaData));
    // console.log(result);

    return res.status(200).json({
      //200 - OK
      status: 'success',
      data: {},
    });
  }catch (e) {
    console.error(e);

    res.status(500).json({
      //200 - OK
      status: 'failed',
    });
  }

};